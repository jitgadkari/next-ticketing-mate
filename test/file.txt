
import { createClient } from "@supabase/supabase-js";

const supabaseUrl = "https://iyvfefxazissntpnzupy.supabase.co"
const supabaseKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Iml5dmZlZnhhemlzc250cG56dXB5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzk0MjgwNzEsImV4cCI6MjA1NTAwNDA3MX0.lLroONGwO25vUQulX3PZhVgkiKSqHRYDyvr6FSgOmzU"

// const supabaseUrl = process.env.SUPABASE_URL;
// const supabaseKey = process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

const validateUserInput = (req, res, next) => {
  const { email, name, username, phone, password, role } = req.body;

  // Email validation regex
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

  // Strong password regex (min 8 chars, 1 uppercase, 1 lowercase, 1 number, 1 special character)
  const passwordRegex =
    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;

  // Allowed roles
  const allowedRoles = ["admin", "general_user", "super_user"];

  if (!email || !emailRegex.test(email)) {
    return res.status(400).json({ error: "Invalid or missing email" });
  }

  if (!name || name.trim().length < 3) {
    return res.status(400).json({ error: "Name must be at least 3 characters long" });
  }

  if (!username || username.trim().length < 3) {
    return res.status(400).json({ error: "Username must be at least 3 characters long" });
  }

  if (!phone || phone.length < 10 || phone.length > 15) {
    return res.status(400).json({ error: "Invalid phone number" });
  }

  if (!password || !passwordRegex.test(password)) {
    return res.status(400).json({
      error:
        "Password must be at least 8 characters long, including an uppercase letter, a lowercase letter, a number, and a special character",
    });
  }

  if (!role || !allowedRoles.includes(role)) {
    return res.status(400).json({ error: "Invalid role. Allowed roles: admin, general_user, super_user" });
  }

  next();
};

const registerUser = async (req, res) => {
  const { email, password, name, username, phone, role } = req.body;

  const { data, error } = await supabase.auth.signUp({
    email,
    password,
    options: {
      data: { name, username, phone, role }, // Stores extra fields in user metadata
    },
  });

  if (error) {
    return res.status(400).json({ error: error.message });
  }

  res.status(201).json({ message: "User registered successfully", user: data });
};

// Usage in Express
import express from "express";
const app = express();

app.use(express.json());

app.post("/register", validateUserInput, registerUser);

app.listen(3000, () => console.log("Server running on port 3000"));
